#include <iostream>
#include <vector>

using namespace std;

int threeSumClosest(vector<int> &nums, int target) {

    int size = nums.size();
    sort(nums.begin(), nums.end());
//    cout<<"size: "<<size;
//    for (int i: nums) cout << i << ", ";
//    cout << endl;

    int closest_sum = nums[0] + nums[1] + nums[2];
    int closest = abs(closest_sum - target);
    for (int i = 0; i < size - 2; i++) {
        // cout << "---i :" << i << endl;
        int j = i+1;
        // cout << "--j :" << j << endl;
        int k = size-1;
        // cout << "k : " << k << endl;
        while ( j < k) {
            int sum = nums[i] + nums[j] + nums[k];
            int sub = sum - target;
            int diff = abs(sub);
            // cout << "k: " << k << " sum : " << sum << " sub : " << sub << endl;
//                cout<<j<<" "<<k<<" "<<sum<<" "<<sub<<" "<<diff<<" "<<size<<endl;
            if (diff < closest) {
                closest = diff;
                closest_sum = sum;
                // cout << "closest :" << nums[i] << " " << nums[j] << " " << nums[k] << endl;
            }

            if (sum < target) {
                j++;
            } else if (sum == target) {
                return sum;
            } else {
                k--;
            }
            // cout << k << endl;
//                while (j < k && nums[j + 1] == nums[j]) j++;
//                while (k > j && nums[k - 1] == nums[k]) k--;
        }
    }
    return closest_sum;
}


int main() {

//    vector<int> v = {-996, -990, -984, -977, -976, -974, -963, -956, -937, -927, -917, -915, -910, -902, -901, -900,
//                     -895, -894, -891, -890, -881, -877, -873, -872, -851, -847, -844, -841, -837, -836, -835, -833,
//                     -822, -818, -817, -813, -806, -805, -802, -794, -792, -785, -784, -780, -779, -771, -770, -768,
//                     -763, -759, -757, -744, -736, -727, -720, -713, -711, -708, -707, -706, -695, -693, -690, -687,
//                     -680, -672, -671, -668, -663, -654, -651, -645, -639, -630, -629, -627, -621, -601, -577, -569,
//                     -559, -558, -550, -545, -544, -534, -533, -526, -524, -521, -508, -497, -490, -488, -482, -470,
//                     -469, -468, -456, -453, -442, -441, -437, -436, -434, -422, -419, -412, -411, -409, -406, -403,
//                     -395, -387, -380, -376, -371, -369, -367, -365, -361, -358, -351, -347, -344, -343, -339, -337,
//                     -334, -329, -327, -313, -310, -307, -298, -291, -288, -285, -283, -282, -275, -270, -264, -262,
//                     -259, -252, -239, -238, -235, -231, -230, -228, -227, -224, -222, -218, -216, -208, -207, -205,
//                     -204, -191, -184, -179, -173, -167, -166, -163, -162, -159, -156, -154, -152, -145, -144, -140,
//                     -111, -108, -106, -103, -98, -94, -86, -85, -82, -78, -64, -60, -58, -54, -45, -39, -33, -32, -27,
//                     -26, -25, -19, -9, -7, 8, 19, 21, 25, 26, 28, 31, 32, 33, 37, 40, 44, 48, 53, 56, 63, 79, 86, 91,
//                     92, 103, 105, 107, 110, 118, 122, 123, 126, 134, 136, 145, 149, 154, 156, 159, 161, 164, 165, 167,
//                     174, 175, 178, 183, 188, 214, 222, 223, 225, 227, 230, 231, 236, 239, 240, 241, 254, 273, 276, 288,
//                     313, 318, 321, 322, 323, 346, 352, 359, 360, 365, 368, 388, 396, 400, 405, 410, 413, 415, 424, 426,
//                     428, 430, 432, 433, 435, 438, 445, 448, 449, 459, 460, 463, 465, 472, 474, 480, 484, 500, 507, 510,
//                     512, 518, 519, 525, 540, 543, 549, 550, 561, 566, 569, 572, 587, 593, 599, 603, 604, 610, 614, 617,
//                     621, 625, 633, 637, 638, 639, 642, 647, 650, 657, 659, 665, 673, 676, 683, 688, 692, 701, 714, 715,
//                     717, 724, 726, 739, 754, 755, 756, 761, 766, 776, 781, 790, 797, 798, 799, 822, 825, 833, 846, 849,
//                     856, 864, 867, 874, 876, 889, 892, 895, 901, 903, 909, 914, 919, 920, 927, 933, 936, 940, 941, 957,
//                     959, 965, 966, 975, 976, 977, 983, 992, 998};

    vector<int> v = {4,0,5,-5,3,3,0,-4,-5};
    cout << threeSumClosest(v, -2);
}

// https://leetcode.com/problems/3sum-closest/
// medium